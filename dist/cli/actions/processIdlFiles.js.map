{"version":3,"sources":["src/cli/actions/processIdlFiles.js"],"names":[],"mappings":";;;;;;;;;;;qBA6BS,eAAe;;kBA5BT,IAAI;;;;kBACJ,IAAI;;;;sBACA,SAAS;;;;8BACD,sBAAsB;;;;4BACxB,oBAAoB;;;;sBAE1B,eAAe;;;;sBACf,QAAQ;;;;uBACP,SAAS;;;;mBACb,KAAK;;;;AAErB,SAAS,WAAW,CAAC,GAAG,EAAE;AACtB,QAAI,GAAG,CAAC,KAAK,EACT,OAAO,GAAG,CAAC,KAAK,CAAC;AACrB,QAAI,GAAG,CAAC,OAAO,IAAI,GAAG,CAAC,IAAI,EACvB,OAAO,IAAI,CAAC,SAAS,CAAC;AAClB,eAAO,EAAE,GAAG,CAAC,OAAO;AACpB,YAAI,EAAE,GAAG,CAAC,IAAI;KACjB,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,KAEZ,OAAO,GAAG,CAAC;CAClB;;AAOD,SAAS,eAAe,CAAC,MAAwB,EAAS;AACtD,oBAAG,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,CACrB,SAAS,CAAC,UAAA,KAAK,EAAI;AAChB,YAAI,KAAK,KAAK,GAAG,EACb,OAAO,gBAAG,UAAU,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,KACtC;AACD,gBAAI,QAAQ,GAAG,iBAAI,KAAK,CAAC,KAAK,CAAC,CAAC;AAChC,gBAAI,QAAQ,CAAC,QAAQ,KAAK,OAAO,IAAI,QAAQ,CAAC,QAAQ,KAAK,QAAQ,EAAE;AACjE,oBAAI,GAAG,GAAG,IAAI,oBAAO,WAAW,EAAE,CAAC;AACnC,0CAAQ,KAAK,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AACzB,uBAAO,gBAAG,UAAU,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;aAChC;SACJ;AACD,eAAO,CAAC,oBAAO,QAAQ,CAAC,KAAK,CAAC,GAAG,yBAAO,KAAK,CAAC,GAAG,gBAAG,UAAU,CAAC,EAAE,CAAC,KAAK,CAAC,CAAA,CACnE,GAAG,CAAC,gBAAG,gBAAgB,CAAC,CAAC;KACjC,CAAC,CACD,SAAS,CAAC,UAAA,QAAQ,EAAI;AACnB,gBAAQ,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;AAC7B,eAAO,oBAAO,kBAAkB,CAAC,QAAQ,CAAC,CACrC,OAAO,EAAE,CAAC,GAAG,CAAC,UAAA,GAAG;mBAAI,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC;SAAA,CAAC,CAAC;KAC3C,CAAC,CACD,SAAS,6BAAgB,CACzB,SAAS,2BAAc,CACvB,OAAO,CAAC,UAAA,CAAC;eAAI,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;KAAA,EACjC,UAAA,GAAG,EAAI;AACH,eAAO,CAAC,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC;KAC1C,EAAE;eAAM,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC;KAAA,CAAC,CAAC;CAClD","file":"src/cli/actions/processIdlFiles.js","sourcesContent":["/* @flow */\r\nimport fs from 'fs';\r\nimport Rx from 'rx';\r\nimport RxNode from 'rx-node';\r\nimport parseIdlSource from '../../parseIdlSource';\r\nimport formatIdlAst from '../../formatIdlAst';\r\n\r\nimport rxGlob from '../../rx-glob';\r\nimport stream from 'stream';\r\nimport request from 'request';\r\nimport url from 'url';\r\n\r\nfunction formatError(err) {\r\n    if (err.stack)\r\n        return err.stack;\r\n    if (err.message && err.line)\r\n        return JSON.stringify({\r\n            message: err.message,\r\n            line: err.line\r\n        }, null, 4);\r\n    else\r\n        return err;\r\n}\r\n\r\nexport\r\ndefault\r\n\r\nfunction processIdlFiles(inputs: Array < string > ): void {\r\n    Rx.Observable.from(inputs)\r\n        .concatMap(input => {\r\n            if (input === '-')\r\n                return Rx.Observable.of(process.stdin);\r\n            else {\r\n                var inputUrl = url.parse(input);\r\n                if (inputUrl.protocol === 'http:' || inputUrl.protocol === 'https:') {\r\n                    var buf = new stream.PassThrough();\r\n                    request(input).pipe(buf);\r\n                    return Rx.Observable.of(buf);\r\n                }\r\n            }\r\n            return (rxGlob.hasMagic(input) ? rxGlob(input) : Rx.Observable.of(input))\r\n                .map(fs.createReadStream);\r\n        })\r\n        .concatMap(readable => {\r\n            readable.setEncoding('utf8');\r\n            return RxNode.fromReadableStream(readable)\r\n                .toArray().map(arr => arr.join(\"\"));\r\n        })\r\n        .concatMap(parseIdlSource)\r\n        .concatMap(formatIdlAst)\r\n        .forEach(s => process.stdout.write(s),\r\n            err => {\r\n                process.stderr.write(formatError(err));\r\n            }, () => process.stdout.write('\\n\\n'));\r\n}"]}